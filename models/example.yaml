---
meta:
  project: example
  version: 0.0.1
  brief: yace example
  full: This example is intended for documentation as well as testing
  prefix: example
  author: Simon A. F. Lund <os@safl.dk>
  lic: BSD-3-Clause

entities:
- key: define
  sym: max_x
  val: {key: dec, lit: 128}
  doc: Maximum value of X
- key: define
  sym: max_y
  val: {key: dec, lit: 64}
  doc: Maximum value of Y
- key: define
  sym: max_z
  val: {key: dec, lit: 64}
  doc: Maximum value of Z

- {key: define, sym: min_x, val: 128, doc: Minimum value of X}
- {key: define, sym: min_y, val: 64, doc: Minimum value of Y}
- {key: define, sym: min_z, val: 64, doc: Minimum value of Z}

- key: enum
  sym: ops
  doc: Opcodes for point operation processor
  members:
  - key: enum_value
    sym: add
    val: {key: hex, lit: 0}
    doc: Add two points
  - key: enum_value
    sym: sub
    val: {key: hex, lit: 1}
    doc: Substract two points
  - key: enum_value
    sym: mul
    val: {key: hex, lit: 2}
    doc: Multple two points

- key: struct
  sym: point
  doc: Point in three dimensional space
  members:
  - {key: field, sym: x, typ: u32, fmt: '%d', doc: X Coordinate}
  - {key: field, sym: y, typ: u32, fmt: '%d', doc: Y Coordinate}
  - {key: field, sym: z, typ: u32, fmt: '%d', doc: Z Coordinate}

- key: struct
  sym: payload
  doc: Instruction format for point operation processor
  members:
  - {key: field, sym: opc, typ: u8, fmt: '0x%x', doc: Point Processing Opcode}
  - {key: field, sym: tag, typ: u8, fmt: '0x%x', doc: Instruction Tag}
  - {key: field, sym: ecc, typ: u8, fmt: '0x%x', doc: Error-correction Seed}
  - key: bitfield
    sym: opts
    width: 8
    doc: Operation options
    members:
    - {key: bits, sym: pack, width: 1, doc: Pack stuff}
    - {key: bits, sym: foo, width: 3, doc: Something foo}
    - {key: bits, sym: bar, width: 4, doc: Something bar}
  - {key: field, sym: input_a, typ: u64, fmt: '0x%"PRIx64"', doc: Input operand a}
  - {key: field, sym: input_b, typ: u64, fmt: '0x%"PRIx64"', doc: Input operand b}
  - {key: field, sym: output, typ: u64, fmt: '0x%"PRIx64"', doc: Output operand}

- key: fun
  sym: hw
  doc: Print hello world
  ret: {key: ret, typ: i, doc: 'On succes, 0 is returned. On error, -1 is returned and errno set to indicate the error'}
  parameters:
  - {key: param, sym: argc, typ: i, doc: Number of command-line arguments}
  - key: param
    sym: argv
    typ: {key: char, const: true, pointer: 2}
    doc: Array of command-line arguments
- key: fun
  sym: hw_void
  doc: Print hello world
  ret: {key: ret, typ: void, doc: 'Nothing, void.'}
  parameters:
  - {key: param, sym: argc, typ: i, doc: Number of command-line arguments}
  - key: param
    sym: argv
    typ: {key: char, const: true, pointer: 2}
    doc: Array of command-line arguments
